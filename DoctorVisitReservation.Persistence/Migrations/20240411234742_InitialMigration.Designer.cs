// <auto-generated />
using System;
using DoctorVisitReservation.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorVisitReservation.Persistence.Migrations
{
    [DbContext(typeof(DoctorVisitReservationContext))]
    [Migration("20240411234742_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Warszawa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kraków"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Łódź"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wrocław"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Poznań"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Gdańsk"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Szczecin"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bydgoszcz"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Lublin"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Katowice"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Białystok"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Gdynia"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Częstochowa"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Radom"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sosnowiec"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Toruń"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Kielce"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Gliwice"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Zabrze"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Bytom"
                        });
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("University")
                        .IsUnique();

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            University = "Uniwersytet Medyczny w Łodzi"
                        },
                        new
                        {
                            Id = 2,
                            University = "Uniwersytet Medyczny w Warszawie"
                        },
                        new
                        {
                            Id = 3,
                            University = "Uniwersytet Medyczny w Krakowie"
                        },
                        new
                        {
                            Id = 4,
                            University = "Uniwersytet Medyczny we Wrocławiu"
                        },
                        new
                        {
                            Id = 5,
                            University = "Gdański Uniwersytet Medyczny"
                        },
                        new
                        {
                            Id = 6,
                            University = "Poznański Uniwersytet Medyczny"
                        });
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.MedicalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("MedicalServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Konsultacja dermatologiczna",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Usuwanie znamion",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Leczenie trądziku",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Badanie EKG",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Test wysiłkowy",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Holter EKG",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "EEG",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "Badanie EMG",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "Konsultacje neurologiczne",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Badanie pediatryczne",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 11,
                            Name = "Szczepienia dzieci",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 12,
                            Name = "Poradnictwo żywieniowe dla dzieci",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 13,
                            Name = "Badanie poziomu hormonów",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 14,
                            Name = "USG tarczycy",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 15,
                            Name = "Konsultacja endokrynologiczna",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 16,
                            Name = "Badanie ginekologiczne",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 17,
                            Name = "USG ginekologiczne",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 18,
                            Name = "Cytologia",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 19,
                            Name = "Konsultacja psychiatryczna",
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 20,
                            Name = "Psychoterapia",
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 21,
                            Name = "Leczenie zaburzeń nastroju",
                            SpecializationId = 7
                        });
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dermatologia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kardiologia"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Neurologia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pediatria"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Endokrynologia"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ginekologia"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Psychiatria"
                        });
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.TreatedDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("TreatedDiseases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Trądzik",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Łuszczyca",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Egzema",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Niewydolność serca",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Choroba wieńcowa",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Nadciśnienie",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Stwardnienie rozsiane",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "Migrena",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "Epilepsja",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ospa wietrzna",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 11,
                            Name = "Odra",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 12,
                            Name = "Szkarlatyna",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 13,
                            Name = "Cukrzyca",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 14,
                            Name = "Choroby tarczycy",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 15,
                            Name = "Osteoporoza",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 16,
                            Name = "Endometrioza",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 17,
                            Name = "Mięśniaki macicy",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 18,
                            Name = "Zespół policystycznych jajników",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 19,
                            Name = "Depresja",
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 20,
                            Name = "Zaburzenia lękowe",
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 21,
                            Name = "Schizofrenia",
                            SpecializationId = 7
                        });
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.WorkAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("WorkAddresses");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorDailySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("DoctorDailySchedules");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.LinkTables.DoctorEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.ToTable("DoctorEducations");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.LinkTables.DoctorMedicalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalServiceId");

                    b.ToTable("DoctorMedicalServices");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.LinkTables.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("DoctorSpecializations");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.LinkTables.DoctorTreatedDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatedDiseaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreatedDiseaseId");

                    b.ToTable("DoctorTreatedDiseases");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.MedicalService", b =>
                {
                    b.HasOne("DoctorVisitReservation.Domain.Entities.DoctorAttributes.Specialization", "Specialization")
                        .WithMany("MedicalServices")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.TreatedDisease", b =>
                {
                    b.HasOne("DoctorVisitReservation.Domain.Entities.DoctorAttributes.Specialization", "Specialization")
                        .WithMany("TreatedDiseases")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.WorkAddress", b =>
                {
                    b.HasOne("DoctorVisitReservation.Domain.Entities.City", "City")
                        .WithMany("WorkAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.LinkTables.DoctorEducation", b =>
                {
                    b.HasOne("DoctorVisitReservation.Domain.Entities.DoctorAttributes.Education", "Education")
                        .WithMany("DoctorEducations")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.LinkTables.DoctorMedicalService", b =>
                {
                    b.HasOne("DoctorVisitReservation.Domain.Entities.DoctorAttributes.MedicalService", "MedicalService")
                        .WithMany("DoctorMedicalServices")
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalService");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.LinkTables.DoctorSpecialization", b =>
                {
                    b.HasOne("DoctorVisitReservation.Domain.Entities.DoctorAttributes.Specialization", "Specialization")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.LinkTables.DoctorTreatedDisease", b =>
                {
                    b.HasOne("DoctorVisitReservation.Domain.Entities.DoctorAttributes.TreatedDisease", "TreatedDisease")
                        .WithMany("DoctorTreatedDiseases")
                        .HasForeignKey("TreatedDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatedDisease");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.City", b =>
                {
                    b.Navigation("WorkAddresses");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.Education", b =>
                {
                    b.Navigation("DoctorEducations");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.MedicalService", b =>
                {
                    b.Navigation("DoctorMedicalServices");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.Specialization", b =>
                {
                    b.Navigation("DoctorSpecializations");

                    b.Navigation("MedicalServices");

                    b.Navigation("TreatedDiseases");
                });

            modelBuilder.Entity("DoctorVisitReservation.Domain.Entities.DoctorAttributes.TreatedDisease", b =>
                {
                    b.Navigation("DoctorTreatedDiseases");
                });
#pragma warning restore 612, 618
        }
    }
}
